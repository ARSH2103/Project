{"ast":null,"code":"const express = require('express');\nconst mysql = require('mysql2');\nconst cors = require('cors');\nconst bodyParser = require('body-parser');\nconst app = express();\nconst port = 5000;\n\n// Middleware\napp.use(cors());\napp.use(bodyParser.json());\n\n// MySQL Database connection\nconst db = mysql.createConnection({\n  host: 'localhost',\n  user: 'root',\n  // your database username\n  password: '',\n  // your database password\n  database: 'userdb' // your database name\n});\n\n// Check the DB connection\ndb.connect(err => {\n  if (err) {\n    console.error('Error connecting to the database:', err);\n    return;\n  }\n  console.log('Connected to the database!');\n});\n\n// Endpoint to fetch user data\napp.post('/dashboard', (req, res) => {\n  const {\n    token\n  } = req.body; // Assuming the token can be used to identify the user\n\n  // Simulate token verification (replace with real token check)\n  const userId = 1; // Replace with real user id extracted from token\n\n  db.query('SELECT firstname, lastname, current_year, branch FROM users WHERE id = ?', [userId], (err, results) => {\n    if (err) {\n      console.error('Error fetching dashboard data:', err);\n      return res.status(500).json({\n        error: 'Internal server error'\n      });\n    }\n    res.json(results[0]);\n  });\n});\n\n// Endpoint to update user data\napp.put('/update-dashboard', (req, res) => {\n  const {\n    token,\n    updatedInfo\n  } = req.body; // Token and updated user information\n\n  // Simulate token verification (replace with real token check)\n  const userId = 1; // Replace with real user id extracted from token\n\n  // Update query to modify user data\n  const {\n    firstname,\n    lastname,\n    current_year,\n    branch,\n    password\n  } = updatedInfo;\n  const query = `\n        UPDATE users \n        SET firstname = ?, lastname = ?, current_year = ?, branch = ?, password = ?\n        WHERE id = ?\n    `;\n  db.query(query, [firstname, lastname, current_year, branch, password, userId], (err, results) => {\n    if (err) {\n      console.error('Error updating user data:', err);\n      return res.status(500).json({\n        error: 'Failed to update data'\n      });\n    }\n    res.json({\n      message: 'User data updated successfully'\n    });\n  });\n});\n\n// Start the server\napp.listen(port, () => {\n  console.log(`Server is running on http://localhost:${port}`);\n});","map":{"version":3,"names":["express","require","mysql","cors","bodyParser","app","port","use","json","db","createConnection","host","user","password","database","connect","err","console","error","log","post","req","res","token","body","userId","query","results","status","put","updatedInfo","firstname","lastname","current_year","branch","message","listen"],"sources":["C:/Users/Hp/firstapp/src/Dashboard.js"],"sourcesContent":["const express = require('express');\r\nconst mysql = require('mysql2');\r\nconst cors = require('cors');\r\nconst bodyParser = require('body-parser');\r\n\r\nconst app = express();\r\nconst port = 5000;\r\n\r\n// Middleware\r\napp.use(cors());\r\napp.use(bodyParser.json());\r\n\r\n// MySQL Database connection\r\nconst db = mysql.createConnection({\r\n    host: 'localhost',\r\n    user: 'root',      // your database username\r\n    password: '',      // your database password\r\n    database: 'userdb' // your database name\r\n});\r\n\r\n// Check the DB connection\r\ndb.connect((err) => {\r\n    if (err) {\r\n        console.error('Error connecting to the database:', err);\r\n        return;\r\n    }\r\n    console.log('Connected to the database!');\r\n});\r\n\r\n// Endpoint to fetch user data\r\napp.post('/dashboard', (req, res) => {\r\n    const { token } = req.body; // Assuming the token can be used to identify the user\r\n    \r\n    // Simulate token verification (replace with real token check)\r\n    const userId = 1; // Replace with real user id extracted from token\r\n\r\n    db.query('SELECT firstname, lastname, current_year, branch FROM users WHERE id = ?', [userId], (err, results) => {\r\n        if (err) {\r\n            console.error('Error fetching dashboard data:', err);\r\n            return res.status(500).json({ error: 'Internal server error' });\r\n        }\r\n        res.json(results[0]);\r\n    });\r\n});\r\n\r\n// Endpoint to update user data\r\napp.put('/update-dashboard', (req, res) => {\r\n    const { token, updatedInfo } = req.body;  // Token and updated user information\r\n    \r\n    // Simulate token verification (replace with real token check)\r\n    const userId = 1; // Replace with real user id extracted from token\r\n\r\n    // Update query to modify user data\r\n    const { firstname, lastname, current_year, branch, password } = updatedInfo;\r\n    \r\n    const query = `\r\n        UPDATE users \r\n        SET firstname = ?, lastname = ?, current_year = ?, branch = ?, password = ?\r\n        WHERE id = ?\r\n    `;\r\n    \r\n    db.query(query, [firstname, lastname, current_year, branch, password, userId], (err, results) => {\r\n        if (err) {\r\n            console.error('Error updating user data:', err);\r\n            return res.status(500).json({ error: 'Failed to update data' });\r\n        }\r\n        res.json({ message: 'User data updated successfully' });\r\n    });\r\n});\r\n\r\n// Start the server\r\napp.listen(port, () => {\r\n    console.log(`Server is running on http://localhost:${port}`);\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}